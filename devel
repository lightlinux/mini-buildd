#!/bin/bash -e

# Helper script to develop/debug mini-buildd.
#
# Quickstart:
#  Enter your dev chroot (preferably sid). sudo should configured.
#  $ cd mini-buildd
#  $ ./devel installdeps
#  $ ./devel update

MBD_HOME=~mini-buildd
# m-b-tool shortcut for testing calls
MBD_TOOL="/usr/bin/mini-buildd-tool admin@localhost:8066"

_head()
{
	printf "\n=> ${*}\n"
}

_check_prog()
{
	local path
	for path in $(printf "${PATH}" | tr ":" " "); do
		local prog="${path}/${1}"
		if [ -x "${prog}" ]; then
			printf "I: Found: ${prog}.\n"
			return 0
		fi
	done
	printf "E: '${1}' not found in path; please install.\n" >&2
	printf "I: You may use './devel installdeps' to install all deps needed.\n" >&2
	exit 1
}

PJPATH="$(readlink -f $(dirname $0))"
PYPATH="${PJPATH}/src"
PYLINTRC="${PJPATH}/.pylintrc"

mbd_installdeps()
{
	sudo apt-get update
	sudo apt-get --no-install-recommends install devscripts equivs

	# Debian package build dependencies; using target-release=*
	# here to always allow highest versions of any sources
	# configured (for example, for backports).
	mk-build-deps --install --root-cmd=sudo --remove --tool="apt-get --no-install-recommends --target-release='*'"

	# Extra tools needed for checks
	sudo apt-get install --no-install-recommends pycodestyle pylint3 pyflakes3 python3-apt python3-bs4 python3-keyrings.alt tidy codespell
	# Extra tools needed vc and package building
	sudo apt-get install --no-install-recommends git git-buildpackage
	# binary package dependencies so we can just dpkg -i for testing
	sudo apt-get install --no-install-recommends --target-release='*' sbuild schroot reprepro debootstrap lintian
}

# grml: The only thing I want here is that my manual test rig can do non-interactive API calls
mbd_pythonkeyringtestconfig()
{
	sudo apt-get install python3-keyrings.alt || true   # for the PlainTextKeyring (newer versions only)
	local configDir="$(python3 -c "import keyring.util.platform_; print(keyring.util.platform_.config_root())")" || true
	[ -n "${configDir}" ] || configDir="${HOME}/.local/share/python_keyring"
	mkdir -p "${configDir}"

	local configFile="${configDir}/keyringrc.cfg"
	local pkVersion=$(dpkg-query --show --showformat='${Version}' python3-keyring)
	if dpkg --compare-versions ${pkVersion} gt 7; then
		cat <<EOF >"${configFile}"
[backend]
# stretch (p-k > 8)
default-keyring=keyrings.alt.file.PlaintextKeyring
EOF
	else
		cat <<EOF >"${configFile}"
[backend]
# jessie (p-k 4.0)
default-keyring=keyring.backends.file.PlaintextKeyring
EOF
	fi
	cat "${configFile}"
}

# Find files with python code
declare -a MBD_PYFINDPARAMS=(-not -wholename './debian/*' -not -wholename './.git/*' -not -wholename './build/*' -not -wholename './.pybuild/*' -type f)
mbd_pyscripts()
{
	local f
	for f in $(find \( "${MBD_PYFINDPARAMS[@]}" \) -a -executable); do
		if head -1 "${f}" | grep --quiet "bin/python"; then
			printf "%s\n" "${f}"
		fi
	done
}

mbd_pymodules()
{
	local -a exceptions=(-true)
	[ -z "${*}" ] || exceptions=($(printf " -not -wholename %s" "${@}"))
	find -name "*.py" -a \( "${MBD_PYFINDPARAMS[@]}" \) -a \( "${exceptions[@]}" \)
}

mbd_pysources()
{
	mbd_pyscripts
	mbd_pymodules
}

mbd_pyenv()
{
	printf "export PYTHONPATH=\"${PYPATH}\"\n"
	printf "export PYLINTRC=\"${PYLINTRC}\""
}

pyenv()
{
	eval "$(mbd_pyenv)"
	python3 ./setup.py build_py
}

mbd_pylintgeneratedmembers()
{
	# Generate all identifiers with "has no xxx member" error. If
	# needed, manually add those that are _actually_
	# false-positive due to django to -> .pylintrc.
	sed -i "s/^generated-members=.*/generated-members=/" "${PYLINTRC}"  # Reset, so we actually see all these errors
	local gm=""
	for o in $(${0} pylint | grep "has no.*member" | cut -d"'" -f4 | sort | uniq); do
		gm+="${o},"
	done
	sed -i "s/^generated-members=.*/generated-members=${gm}/" "${PYLINTRC}"
	printf "${PYLINTRC} tainted.\n"
}

mbd_installdjango()
{
	dpkg -s python3-django | grep "^Version" || true
	sudo dpkg --install ../django-versions/python3-django*${1}*.deb
	dpkg -s python3-django | grep "^Version"
}

# python API has nicer support for this.
# Example call: MBD__PACKAGE="mbd-test-cpp" MBD__DIST="squeeze-test-unstable" [MBD__VERSION=1.2.3] ./devel wait4package
mbd_wait4package()
{
	local sleep=30
	printf "\nWaiting for ${MBD__PACKAGE}-${MBD__VERSION} to appear in ${MBD__DIST}:\n"
	while true; do
		# ${MBD_TOOL} show ${MBD__PACKAGE}
		if ${MBD_TOOL} show ${MBD__PACKAGE} 2>/dev/null | grep "^${MBD__DIST}\b.*${MBD__VERSION}"; then
			printf "\nOK, build\n"
			break
		else
			printf "*"
			sleep ${sleep}
		fi
	done
}

# temporary debug helper only
# This shows bug https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=877637 (debian/rules now has a workaround).
mbd_sphinxrepro()
{
	# export PYTHONHASHSEED=random  # default, buggy
	# export PYTHONHASHSEED=0       # workaround

	local b
	for b in 1 2; do
		./debian/rules clean
		rm -rf "sphinx-${b}"
		/usr/share/sphinx/scripts/python3/sphinx-build ./doc/ ./build/sphinx/html/
		cp -a build/sphinx/ sphinx-${b}
	done
	diff -r -u -x *.pickle sphinx-1/ sphinx-2/
	printf "OK: sphinx HTML identical"
}

#
# check: Static code checks
#
mbd_check:static:0:pycodestyle()
{
	_check_prog pycodestyle
	(
		pyenv
		pycodestyle --show-source --show-pep8 --config=${PJPATH}/.pycodestyle $(mbd_pysources)
	)
}

mbd_check:static:0:pymisc()
{
	local f regex
	for f in $(mbd_pysources); do
		for regex in \
			^\#\ -\\*-\ coding:\ utf-8\ -\\*-; do
			printf "Checking '${f}' for '${regex}'..."
			grep --quiet "${regex}" "${f}"
			printf "OK.\n"
		done
	done
}

mbd_check:static:0:codespell()
{
	local ups=$(codespell --quiet-level=2 $(mbd_pysources))
	if [ -n "${ups}" ]; then
		printf "${ups}\n" >&2
		return 1
	fi
}

mbd_check:static:0:css()
{
	local class errors=0 ignoreRegex="mbd-action-.*"

	for class in $(grep -h -o "#mbd[[:alnum:]\-]\+" src/mini_buildd/static/css/*.css | sort -r | uniq); do
		if [[ ${class:1} =~ ${ignoreRegex} ]]; then
			printf "Skipping %s.\n" "${class}"
		else
			if ! grep -r -q "${class:1}" src/mini_buildd/templates/; then
				printf "E: CSS class unused: %s:\n" "${class}" >&2
				grep -l "${class}" src/mini_buildd/static/css/*.css
				errors+=1
			fi
		fi
	done
	printf "CSS: %s unused classes found.\n" "${errors}"
	return ${errors}
}

mbd_check:static:0:pyflakes()
{
	_check_prog pyflakes3
	(
		pyenv
		pyflakes3 $(mbd_pysources)
	)
}

mbd_check:static:1:pylint()
{
	_check_prog pylint3
	(
		pyenv
		printf "N: pylint checking modules...\n"
		pylint3 --jobs=2 $(mbd_pymodules ./doc/conf.py)  # ./doc/conf.py can't be used pylint-conform
		printf "N: pylint checking scripts...\n"
		pylint3 --jobs=2 --disable=C0103 $(mbd_pyscripts)
		printf "W: Overall locally disabled checks: %s\n" "$(cat $(mbd_pysources) | grep --count "pylint:.*disable")"  # No good way to keep track with pylint itself
	)
}

mbd_check:static:1:pydoctests()
{
	(
		pyenv
		for m in $(mbd_pymodules ./setup.py ./doc/conf.py); do  # ./setup.py && ./doc/conf.py can't be used for doctests
			local module="$(basename $(tr '/' '.' <<< ${m:4}) '.py' | cut -d. -f2-)"
			printf "=> Doctest on %s (%s)\n" "${m}" "${module}"
			( cd ./src/ && ./run-doctest "${module}" )
		done
		python3 -m doctest -v src/mini-buildd src/mini-buildd-tool
	)
}

mbd_check:static:2:build()
{
	_head "Checking changelog (must be unchanged)..."
	git diff-index --exit-code HEAD debian/changelog
	trap "git checkout debian/changelog" EXIT

	_head "Building snapshot..."
	gbp dch --snapshot --auto
	DEB_BUILD_OPTIONS+=" nocheck" gbp buildpackage --git-ignore-new --git-ignore-branch -us -uc
}

mbd_check:static:3:lintian()
{
	lintian --fail-on-warnings --suppress-tags=changelog-should-mention-nmu,source-nmu-has-incorrect-version-number,newer-standards-version --info ../mini-buildd_$(dpkg-parsechangelog --show-field=Version)_$(dpkg --print-architecture).changes
}

mbd_check:static:9:debrepro()
{
	debrepro
}

#
# checklive: Checks on running mini-buildd instance on localhost
#
mbd_check:live:0:apicalls()
{
	_head "Checking basic src/mini-buildd-tool calls"
	${MBD_TOOL} status
	${MBD_TOOL} getkey
	${MBD_TOOL} getdputconf
	${MBD_TOOL} getsourceslist wheezy
}

mbd_check:live:1:tidy()
{
	_head "Some (live) HTML checks."
	local url
	for url in \
		http://localhost:8066/mini_buildd \
		http://localhost:8066/mini_buildd/api \
		http://localhost:8066/mini_buildd/api?command=getdputconf \
		http://localhost:8066/accounts/login/ \
		; do
		printf "\n=> Testing HTML: ${url}\n"
		wget --output-document=- "${url}" | tidy -output /dev/null
	done
}

mbd_check()
{
	local typ="${1:-.*}"
	local checks="$(declare -F | cut -d" " -f3- | grep "^mbd_check:${typ}:[[:alnum:]]" || true)" c
	local -a info=()
	for c in ${checks}; do
		printf "=> Running %s...\n" "${c}"
		local startStamp=$(date +%s)
		${c}
		info+=("$(printf "OK (%03d seconds): %s" "$(($(date +%s) - startStamp))" "${c}")")
	done
	printf "\nResults:\n"
	printf "%s\n" "${info[@]}"
	printf "\nOK, all checks succeeded.\n"
}

# Special to be used in debian/rules
mbd_check:debian-rules()
{
	mbd_check:static:1:pydoctests
}

mbd_service()
{
	if sudo ischroot && [ -d /run/systemd/system ]; then
		# Seems we are in a chroot, and host is running systemd
		# The service will not be started in that case
		# For now, we really want to start the service anyway, so this is still usable in "traditional" chroots
		# (Rather use a container-based environment to test)
		sudo mv /lib/lsb/init-functions.d/40-systemd /lib/lsb/init-functions.d/40-systemd.DISABLED || true
		sudo /etc/init.d/mini-buildd ${1}
		sudo mv /lib/lsb/init-functions.d/40-systemd.DISABLED /lib/lsb/init-functions.d/40-systemd || true
	else
		service mini-buildd "${1}"
	fi
}

mbd_purge()
{
	_head "Purging all mini-buildd packages"
	mbd_service stop || true
	sudo dpkg --purge mini-buildd mini-buildd-utils mini-buildd-doc python3-mini-buildd python-mini-buildd mini-buildd-common

	# Also test mini-buildd's internal sbuild key workaround
	sudo rm -v -f /var/lib/sbuild/apt-keys/*
}

mbd_install()
{
	_head "Installing snapshot..."
	cat ./devel.debconf.selections | sudo debconf-set-selections --verbose -
	sudo debi --with-depends
}

mbd_update()
{
	mbd_check:static:2:build
	mbd_install
	mbd_service restart
	printf "Ok, updated (NO checks).\n"
}

mbd_updatecheck()
{
	mbd_check static
	mbd_install
	mbd_service restart
	sleep 10 && mbd_check live  # Sleeping a while 1st to be sure the network service is ready

	printf "Ok, updated (checked).\n"
}

mbd_checkall()
{
	mbd_purge
	mbd_updatecheck
	mbd_pythonkeyringtestconfig

	time /usr/share/mini-buildd/bin/mbd-auto-setup

	# Migration of test packages
	MBD__PACKAGE="mbd-test-cpp" MBD__DIST="jessie-test-unstable" mbd_wait4package
	${MBD_TOOL} migrate mbd-test-cpp jessie-test-unstable --confirm=migrate
	${MBD_TOOL} migrate mbd-test-cpp jessie-test-testing --confirm=migrate

	# Extra test packages when available
	[ ! -d ../test-packages/ ] || dput --unchecked --no-upload-log mini-buildd-$(hostname) ../test-packages/*.changes
}

# Usage trap
sep=""
for c in $(compgen -A function | grep '^mbd_'); do
	ACTIONS+="${sep}${c:4}"
	sep="|"
done
trap "printf '\nUsage: ./$(basename "${0}") ${ACTIONS} [arg1 arg2...] \n' >&2" ERR

# Run
mbd_${1} "${@:2}"
